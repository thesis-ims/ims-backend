plugins {
	id "java"
	id "org.springframework.boot" version "3.4.2"
	id "io.spring.dependency-management" version "1.1.7"
	id "jacoco"
}

group = "com.backend"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation "org.testng:testng:$testng_version"
	testImplementation "org.springframework:spring-test:$spring_test_version"
	testImplementation "org.mockito:mockito-core:$mockito_version"
	testRuntimeOnly "org.testng:testng:$testng_version"
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-logging"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "javax.annotation:javax.annotation-api:$javax_version"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "com.fasterxml.jackson.core:jackson-core"
	implementation "io.jsonwebtoken:jjwt-api:$jwt_version"
	implementation "javax.xml.bind:jaxb-api:$jaxb_version"
	implementation "org.apache.commons:commons-lang3:$apache_common_version"
	implementation "org.javers:javers-core:$javers_version"
	implementation "com.google.code.gson:gson:$gson_version"
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:$jwt_version"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jwt_version"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useTestNG()
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('jacocoReports')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		// Exclusion pattern
		classDirectories.setFrom(files(classDirectories.files.collect { dir ->
			fileTree(dir: dir, exclude: [
					'**/model/**',
					'**/common/**',
					'**/api/service/**', // because its only interface
					'**/application/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
	afterEvaluate {
		// Exclusion pattern
		classDirectories.setFrom(files(classDirectories.files.collect { dir ->
			fileTree(dir: dir, exclude: [
					'**/model/**',
					'**/common/**',
					'**/api/service/**', // because its only interface
					'**/application/**'
			])
		}))
	}
}

jar {
	enabled = false
}


check.dependsOn jacocoTestCoverageVerification
